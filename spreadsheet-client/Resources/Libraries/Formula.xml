<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Formula</name>
    </assembly>
    <members>
        <member name="T:SpreadsheetUtilities.Formula">
            <summary>
            Represents formulas written in standard infix notation using standard precedence
            rules.  The allowed symbols are non-negative numbers written using double-precision 
            floating-point syntax; variables that consist of a letter or underscore followed by 
            zero or more letters, underscores, or digits; parentheses; and the four operator 
            symbols +, -, *, and /.  
            
            Spaces are significant only insofar that they delimit tokens.  For example, "xy" is
            a single variable, "x y" consists of two variables "x" and y; "x23" is a single variable; 
            and "x 23" consists of a variable "x" and a number "23".
            
            Associated with every formula are two delegates:  a normalizer and a validator.  The
            normalizer is used to convert variables into a canonical form, and the validator is used
            to add extra restrictions on the validity of a variable (beyond the standard requirement 
            that it consist of a letter or underscore followed by zero or more letters, underscores,
            or digits.)  Their use is described in detail in the constructor and method comments.
            </summary>
        </member>
        <member name="F:SpreadsheetUtilities.Formula.formula">
            <summary>
            The string instance of the formula
            </summary>
        </member>
        <member name="F:SpreadsheetUtilities.Formula.formulaTokens">
            <summary>
            A string array that holds all of the tokens of the formula
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.#ctor(System.String)">
            <summary>
            Creates a Formula from a string that consists of an infix expression written as
            described in the class comment.  If the expression is syntactically invalid,
            throws a FormulaFormatException with an explanatory Message.
            
            The associated normalizer is the identity function, and the associated validator
            maps every string to true.  
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.#ctor(System.String,System.Func{System.String,System.String},System.Func{System.String,System.Boolean})">
            <summary>
            Creates a Formula from a string that consists of an infix expression written as
            described in the class comment.  If the expression is syntactically incorrect,
            throws a FormulaFormatException with an explanatory Message.
            
            The associated normalizer and validator are the second and third parameters,
            respectively.  
            
            If the formula contains a variable v such that normalize(v) is not a legal variable, 
            throws a FormulaFormatException with an explanatory message. 
            
            If the formula contains a variable v such that isValid(normalize(v)) is false,
            throws a FormulaFormatException with an explanatory message.
            
            Suppose that N is a method that converts all the letters in a string to upper case, and
            that V is a method that returns true only if a string consists of one letter followed
            by one digit.  Then:
            
            new Formula("x2+y3", N, V) should succeed
            new Formula("x+y3", N, V) should throw an exception, since V(N("x")) is false
            new Formula("2x+y3", N, V) should throw an exception, since "2x+y3" is syntactically incorrect.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.IsVariable(System.String)">
            <summary>
            takes in a string variable that must have been normalized first to ensure that it is 
            a valid variable according to the following global formula rules:
            a variable consists of a letter or underscore followed by zero or more letters,
            underscores, or digits.
            </summary>
            <param name="variable"></param>
            <returns></returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.isOperator(System.String)">
            <summary>
            Takes in a token string and returns if it is a operand of the form:
            +,-,*, or /
            </summary>
            <param name="token"> the string to be evaluated</param>
            <returns>ture if the token is +,-,*, or /, false otherwise </returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.checkSyntax(System.String[])">
            <summary>
            Takes a string array formula and checks to see if the syntax is correct
            throws a FormulaFormatException if the syntax is incorrect with an
            appropriate error message
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.EndingToken(System.String)">
            <summary>
            returns true if the ending token is a number, variable, or a closing parenthesis
            </summary>
            <param name="formula"></param>
            <returns></returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.startingToken(System.String)">
            <summary>
            returns true if the starting token is a number, variable, or an opening parenthesis
            </summary>
            <param name="formula"></param>
            <returns></returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.Evaluate(System.Func{System.String,System.Double})">
             <summary>
             Evaluates this Formula, using the lookup delegate to determine the values of
             variables.  When a variable symbol v needs to be determined, it should be looked up
             via lookup(normalize(v)). (Here, normalize is the normalizer that was passed to 
             the constructor.)
             
             For example, if L("x") is 2, L("X") is 4, and N is a method that converts all the letters 
             in a string to upper case:
             
             new Formula("x+7", N, s => true).Evaluate(L) is 11
             new Formula("x+7").Evaluate(L) is 9
             
             Given a variable symbol as its parameter, lookup returns the variable's value 
             (if it has one) or throws an ArgumentException (otherwise).
             
             If no undefined variables or divisions by zero are encountered when evaluating 
             this Formula, the value is returned.  Otherwise, a FormulaError is returned.  
             The Reason property of the FormulaError should have a meaningful explanation.
            
             This method should never throw an exception.
             </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.GetVariables">
            <summary>
            Enumerates the normalized versions of all of the variables that occur in this 
            formula.  No normalization may appear more than once in the enumeration, even 
            if it appears more than once in this Formula.
            
            For example, if N is a method that converts all the letters in a string to upper case:
            
            new Formula("x+y*z", N, s => true).GetVariables() should enumerate "X", "Y", and "Z"
            new Formula("x+X*z", N, s => true).GetVariables() should enumerate "X" and "Z".
            new Formula("x+X*z").GetVariables() should enumerate "x", "X", and "z".
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.ToString">
            <summary>
            Returns a string containing no spaces which, if passed to the Formula
            constructor, will produce a Formula f such that this.Equals(f).  All of the
            variables in the string should be normalized.
            
            For example, if N is a method that converts all the letters in a string to upper case:
            
            new Formula("x + y", N, s => true).ToString() should return "X+Y"
            new Formula("x + Y").ToString() should return "x+Y"
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.Equals(System.Object)">
            <summary>
            If obj is null or obj is not a Formula, returns false.  Otherwise, reports
            whether or not this Formula and obj are equal.
            
            Two Formulae are considered equal if they consist of the same tokens in the
            same order.  To determine token equality, all tokens are compared as strings 
            except for numeric tokens and variable tokens.
            Numeric tokens are considered equal if they are equal after being "normalized" 
            by C#'s standard conversion from string to double, then back to string. This 
            eliminates any inconsistencies due to limited floating point precision.
            Variable tokens are considered equal if their normalized forms are equal, as 
            defined by the provided normalizer.
            
            For example, if N is a method that converts all the letters in a string to upper case:
             
            new Formula("x1+y2", N, s => true).Equals(new Formula("X1  +  Y2")) is true
            new Formula("x1+y2").Equals(new Formula("X1+Y2")) is false
            new Formula("x1+y2").Equals(new Formula("y2+x1")) is false
            new Formula("2.0 + x7").Equals(new Formula("2.000 + x7")) is true
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.DoubleEquals(System.Double,System.Double)">
            <summary>
            Takes in two doubles and compares them for equality by normalizing the doubles 
            in the following manner: 
            both doubles should have first been converted from strings they then will be converted
            into strings again they are equal if the resulting strings are equal
            
            </summary>
            <param name="token"></param>
            <param name="doubleToken"></param>
            <returns></returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.op_Equality(SpreadsheetUtilities.Formula,SpreadsheetUtilities.Formula)">
            <summary>
            Reports whether f1 == f2, using the notion of equality from the Equals method.
            Note that if both f1 and f2 are null, this method should return true.  If one is
            null and one is not, this method should return false.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.op_Inequality(SpreadsheetUtilities.Formula,SpreadsheetUtilities.Formula)">
            <summary>
            Reports whether f1 != f2, using the notion of equality from the Equals method.
            Note that if both f1 and f2 are null, this method should return false.  If one is
            null and one is not, this method should return true.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.GetHashCode">
            <summary>
            Returns a hash code for this Formula.  If f1.Equals(f2), then it must be the
            case that f1.GetHashCode() == f2.GetHashCode().  Ideally, the probability that two 
            randomly-generated unequal Formulae have the same hash code should be extremely small.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.GetTokens(System.String)">
            <summary>
            Given an expression, enumerates the tokens that compose it.  Tokens are left paren;
            right paren; one of the four operator symbols; a string consisting of a letter or underscore
            followed by zero or more letters, digits, or underscores; a double literal; and anything that doesn't
            match one of those patterns.  There are no empty tokens, and no token contains white space.
            </summary>
        </member>
        <member name="T:SpreadsheetUtilities.FormulaFormatException">
            <summary>
            Used to report syntactic errors in the argument to the Formula constructor.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.FormulaFormatException.#ctor(System.String)">
            <summary>
            Constructs a FormulaFormatException containing the explanatory message.
            </summary>
        </member>
        <member name="T:SpreadsheetUtilities.FormulaError">
            <summary>
            Used as a possible return value of the Formula.Evaluate method.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.FormulaError.#ctor(System.String)">
            <summary>
            Constructs a FormulaError containing the explanatory reason.
            </summary>
            <param name="reason"></param>
        </member>
        <member name="P:SpreadsheetUtilities.FormulaError.Reason">
            <summary>
             The reason why this FormulaError was created.
            </summary>
        </member>
        <member name="T:SpreadsheetUtilities.Evaluator">
            <summary>
            A static class that contains the method Evaluate that takes in a mathematical expression
            as a string and returns the corresponding int, respecting parenthesis and order of operations
            Contains a delegate called a Lookup that takes in a string variable type and returns the value
            that corresponds to the variable name.
            </summary>
        </member>
        <member name="T:SpreadsheetUtilities.Evaluator.Lookup">
            <summary>
            A delagate that takes in a string expression and returns an int
            for the given variable value
            </summary>
            <param name="v">variable to be evaluated</param>
            <returns></returns>
        </member>
        <member name="M:SpreadsheetUtilities.Evaluator.Evaluate(System.String,System.Func{System.String,System.Double})">
            <summary>
            Takes in two parameters, a string containing values, variables, and operands producing
            integer and a lookup delegate that can take variables and lookup an integer value to go along with it. 
            Evaluate follows the necessary rules for order of operation to produces a correct answer.
            Variables must be of the form capital letter followed by a number with no spaces
            </summary>
            <param name="exp"> This is the expression to be evaluated</param>
            <param name="variableEvaluator">  A delegate function that looks takes in strings and looks up the variable values </param>
            <returns></returns>
        </member>
        <member name="M:SpreadsheetUtilities.Evaluator.pushOperator(System.Char,System.Collections.Generic.Stack{System.Char},System.Collections.Generic.Stack{System.Double})">
            <summary>
            Pushes the given operator onto the operator stack in certain ways depending on the state
            of the stack and the operator given
            </summary>
            <param name="op"> the operator to be evaluated</param>
            <param name="operatorStack"> the operator stack for the evaluate method</param>
            /// <param name="vlaueStack"> the value stack for the evaluate method</param>
        </member>
        <member name="M:SpreadsheetUtilities.Evaluator.EvaluateRightParen(System.Collections.Generic.Stack{System.Double},System.Collections.Generic.Stack{System.Char})">
            <summary>
            Takes in the operator stacks and evaluates the right parenthesis accordingly
            </summary>
            <param name="valueStack"> value stack for the evaluate function</param>
            <param name="operatorStack"> operator stack for the evaluate fucntion</param>
        </member>
        <member name="M:SpreadsheetUtilities.Evaluator.isOperator(System.String)">
            <summary>
            Takes in a token string and returns if it is a operand of the form:
            +,-,*, or /
            </summary>
            <param name="token"> the string to be evaluated</param>
            <returns>ture if the token is +,-,*, or /, false otherwise </returns>
        </member>
        <member name="M:SpreadsheetUtilities.Evaluator.IsVariable(System.String)">
            <summary>
            takes in a value to see if it is a valid operator of the form capital letter followed by
            an integer number with no spaces allowed
            </summary>
            <param name="token"> the token to be analyzed</param>
            <returns>if it is or is not an acceptable variable</returns>
        </member>
        <member name="M:SpreadsheetUtilities.Evaluator.EvaluateAndPush(System.Char,System.Collections.Generic.Stack{System.Double},System.Double,System.Double)">
            <summary>
            Tkaes in the operator,stack, and values to decide how to use the operator
            and then push the next value onto the stack
            </summary>
            <param name="op"> the operator to be applied to the  two values</param>
            <param name="valueStack"> the stack where the resulting value will be stored</param>
            <param name="value1"> first value in the expression</param>
            <param name="value2"> second value in the expression</param>
        </member>
    </members>
</doc>
